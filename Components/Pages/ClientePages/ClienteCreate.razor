@page "/Cliente/Create"
@inject ClienteServices clienteServices
@inject TecnicoServices tecnicoServices
@inject NavigationManager navigationManager

<EditForm Model="clientes" OnValidSubmit="Guardar">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="card shadow-lg border-0" style="background-color: white">
        <div class="card-header bg-primary text-center text-white py-2 rounded">
            <h3 style="font-weight: bold;" class="font-weight-bold">Registro de Clientes</h3>
        </div>

        <div class="card-body">
            <div class="col-md-10 mb-3">
                <label for="ClienteId" class="form-label">ClienteId:</label>
                <InputNumber @bind-Value="clientes.ClienteId" class="form-control" />
                <ValidationMessage For="@(() => clientes.ClienteId)" />
            </div>

           
            <div class="mb-3">
                <label for="Nombres" class="form-label">Nombres:</label>
                <InputText @bind-Value="clientes.Nombres" class="form-control" />
                <ValidationMessage For="@(() => clientes.Nombres)" />
            </div>

            <div class="mb-3">
                <label for="FechaIngreso" class="form-label">Fecha de Ingreso:</label>
                <InputDate @bind-Value="clientes.FechaIngreso" class="form-control" />
                <ValidationMessage For="@(() => clientes.FechaIngreso)" />
            </div>

            <div class="mb-3">
                <label for="RNC" class="form-label">RNC:</label>
                <InputText @bind-Value="clientes.RNC" class="form-control" />
                <ValidationMessage For="@(() => clientes.RNC)" />
            </div>

            <div class="mb-3">
                <label for="LimiteCredito" class="form-label">Límite de Crédito:</label>
                <InputNumber @bind-Value="clientes.LimiteCredito" class="form-control" />
                <ValidationMessage For="@(() => clientes.LimiteCredito)" />
            </div>

            <div class="mb-3">
                <label for="Direccion" class="form-label">Dirección:</label>
                <InputText @bind-Value="clientes.Direccion" class="form-control" />
                <ValidationMessage For="@(() => clientes.Direccion)" />
            </div>

            <div class="mb-3">
                <label for="TecnicoId" class="form-label">Técnico Asignado:</label>
                <InputSelect @bind-Value="clientes.TecnicoId" class="form-control">
                    <option value="">Seleccione un Técnico</option>
                    @foreach (var tecnico in listaTecnicos)
                    {
                        <option value="@tecnico.TecnicoId">@tecnico.Nombres</option>
                    }
                </InputSelect>
                <ValidationMessage For="@(() => clientes.TecnicoId)" />
            </div>
        </div>

        <div class="card-footer d-flex justify-content-lg-center text-center">
            <div class="btn-group">
                <button type="button" class="btn btn-outline-primary" @onclick="Nuevo">
                    <span class="bi bi-plus"></span> Nuevo
                </button>
                <button type="submit" class="btn btn-outline-success">
                    <span class="bi bi-check2-square"></span> Guardar
                </button>
                <button type="button" class="btn btn-outline-danger" @onclick="Volver">
                    <span class="bi bi-arrow-90deg-left"></span> Volver
                </button>
            </div>
        </div>
    </div>
</EditForm>

@code {
    public Clientes clientes { get; set; } = new Clientes();
    public List<Clientes> listaClientes { get; set; } = new List<Clientes>();
    public List<Tecnicos> listaTecnicos { get; set; } = new List<Tecnicos>();

    protected override async Task OnInitializedAsync()
    {
        listaTecnicos = await tecnicoServices.Listar(tecnico => true);
    }

    public async Task Nuevo()
    {
        clientes = new Clientes();
    }

    public async Task<bool> Validar()
    {
        
        if (string.IsNullOrWhiteSpace(clientes.Nombres))
        {
            return false;
        }

      
        var existe = await clienteServices.Existe(clientes.ClienteId);
        return !existe;
    }

    public async Task Guardar()
    {
        if (!await Validar())
        {
            
            return;
        }

        var guardado = await clienteServices.Guardar(clientes);
        if (guardado)
        {
            Nuevo();
        }
        else
        {
            
        }
    }

    public void Volver()
    {
        navigationManager.NavigateTo("/Cliente/Index");
    }
}
