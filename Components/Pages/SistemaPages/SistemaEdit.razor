@page "/Sistema/Edit"
@page "/Sistema/Edit/{SistemaId:int}"
@inject SistemaServices sistemaService
@inject NavigationManager navigationManager
@inject IToastService toastService

@rendermode InteractiveServer

<EditForm Model="sistema" OnValidSubmit="Guardar">
    <DataAnnotationsValidator />
    <div class="card shadow-lg border-0" style="background-color: white">

        <div class="card-header bg-primary text-center text-white py-2 rounded">
            <h3 style="font-weight: bold;" class="font-weight-bold">Modificar Sistema</h3>
        </div>

        <div class="card-body">
            @*SistemaId*@
            <div class="mb-3">
                <label for="SistemaId" class="form-label">SistemaId:</label>
                <InputNumber @bind-Value="sistema.SistemaId" class="form-control" />
            </div>
            @*Descripción*@
            <div class="mb-3">
                <label for="Descripcion" class="form-label">Descripción:</label>
                <InputText @bind-Value="sistema.Descripcion" class="form-control" />
                <ValidationMessage For="@(() => sistema.Descripcion)" />
            </div>
            @*Complejidad*@ 
            <div class="mb-3">
                <label for="Complejidad" class="form-label">Complejidad:</label>
                <InputText @bind-Value="sistema.Complejidad" class="form-control" />
                <ValidationMessage For="@(() => sistema.Complejidad)" />
            </div>
        </div>

        <div class="card-footer d-flex justify-content-lg-center text-center">
            <div class="btn-group">
                <button type="button" class="btn btn-outline-primary ml-2" @onclick="Nuevo"><span class="bi bi-plus"></span>Nuevo</button>
                <button type="submit" class="btn btn-outline-success ml-2"><span class="bi bi-check-circle-fill"></span>Guardar</button>
                <button type="button" class="btn btn-outline-danger" @onclick="Retroceder"><span class="bi bi-arrow-bar-left"></span>Retroceder</button>
            </div>
        </div>
    </div>
</EditForm>

@code {
    [Parameter]
    public int SistemaId { get; set; }
    public Sistemas sistema { get; set; } = new Sistemas();
    private bool existe = false;

    protected override async Task OnInitializedAsync()
    {
        if (SistemaId != 0)
        {
            await Buscar();
        }
    }

    public async Task Buscar()
    {
        existe = false;
        var sistemaEncontrado = await sistemaService.Buscar(SistemaId);
        if (sistemaEncontrado != null)
        {
            sistema = sistemaEncontrado;
        }
        else
        {
            Nuevo();
        }
    }

    public async Task<bool> Validar()
    {
        var listaSistemas = await sistemaService.Listar(s => s.Descripcion.ToLower() == sistema.Descripcion.ToLower() && s.SistemaId != sistema.SistemaId);
        existe = listaSistemas.Any();
        return !existe;
    }

    public async Task Nuevo()
    {
        sistema = new Sistemas();
        existe = false;
    }

    public async Task Guardar()
    {
        if (!await Validar())
        {
            toastService.ShowWarning("Ya existe un sistema con esa descripción.");
            return;
        }

        var guardado = await sistemaService.Guardar(sistema);
        if (guardado)
        {
            toastService.ShowSuccess("Se ha modificado el sistema correctamente.");
            navigationManager.NavigateTo("/Sistema/Index");
        }
    }

    public void Retroceder()
    {
        navigationManager.NavigateTo("/Sistema/Index");
    }
}
